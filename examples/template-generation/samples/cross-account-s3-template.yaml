AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cross-Account S3 Bucket Setup with Security Best Practices - Production Ready Template for secure multi-account access with encryption, logging, and compliance controls'

Parameters:
  BucketName:
    Type: String
    Description: 'Name for the S3 bucket (must be globally unique)'
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: 'Bucket name must be lowercase, start and end with alphanumeric characters'
    MinLength: 3
    MaxLength: 63

  TrustedAccountIds:
    Type: CommaDelimitedList
    Description: 'List of AWS Account IDs that should have cross-account access'
    Default: '123456789012,987654321098'

  CrossAccountRoleName:
    Type: String
    Description: 'Name for the cross-account access role'
    Default: 'CrossAccountS3AccessRole'
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'

  Environment:
    Type: String
    Description: 'Environment designation'
    Default: 'production'
    AllowedValues:
      - development
      - staging
      - production

  KMSKeyRotation:
    Type: String
    Description: 'Enable automatic KMS key rotation'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  CloudTrailRetentionDays:
    Type: Number
    Description: 'CloudWatch Logs retention period for CloudTrail logs'
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  AccessLoggingEnabled:
    Type: String
    Description: 'Enable S3 access logging'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  EnableAccessLogging: !Equals [!Ref AccessLoggingEnabled, 'true']
  EnableKMSRotation: !Equals [!Ref KMSKeyRotation, 'true']
  IsProduction: !Equals [!Ref Environment, 'production']

Resources:
  # KMS Key for S3 Encryption
  S3EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'KMS Key for ${BucketName} S3 bucket encryption'
      EnableKeyRotation: !If [EnableKMSRotation, true, false]
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow Cross-Account Access
            Effect: Allow
            Principal:
              AWS: !Split
                - ','
                - !Sub
                  - 'arn:aws:iam::${inner}:root'
                  - inner: !Join
                    - ':root,arn:aws:iam::'
                    - !Ref TrustedAccountIds
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
              - 'kms:DescribeKey'
            Resource: '*'
          - Sid: Allow S3 Service
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
              - 'kms:DescribeKey'
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-encryption-key'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'S3 Cross-Account Encryption'

  S3EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${BucketName}-s3-key'
      TargetKeyId: !Ref S3EncryptionKey

  # S3 Access Logging Bucket (if enabled)
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Condition: EnableAccessLogging
    Properties:
      BucketName: !Sub '${BucketName}-access-logs'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldAccessLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-access-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'S3 Access Logging'

  # Main S3 Bucket
  CrossAccountS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3EncryptionKey
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogging
        - DestinationBucketName: !Ref AccessLogsBucket
          LogFilePrefix: 'access-logs/'
        - !Ref AWS::NoValue
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: 's3:ObjectCreated:*'
            CloudWatchConfiguration:
              LogGroupName: !Ref S3CloudWatchLogGroup
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
              - TransitionInDays: 365
                StorageClass: DEEP_ARCHIVE
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Ref BucketName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Cross-Account Data Storage'
        - Key: Compliance
          Value: 'SOX'

  # S3 Bucket Policy for Cross-Account Access
  CrossAccountBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CrossAccountS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${CrossAccountS3Bucket}/*'
              - !Sub '${CrossAccountS3Bucket}'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
          - Sid: AllowCrossAccountAccess
            Effect: Allow
            Principal:
              AWS: !Split
                - ','
                - !Sub
                  - 'arn:aws:iam::${inner}:role/${CrossAccountRoleName}'
                  - inner: !Join
                    - !Sub ':role/${CrossAccountRoleName},arn:aws:iam::'
                    - !Ref TrustedAccountIds
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:GetObjectVersion'
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
            Resource:
              - !Sub '${CrossAccountS3Bucket}/*'
              - !Sub '${CrossAccountS3Bucket}'
            Condition:
              StringEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
                's3:x-amz-server-side-encryption-aws-kms-key-id': !GetAtt S3EncryptionKey.Arn
          - Sid: AllowCrossAccountListBucket
            Effect: Allow
            Principal:
              AWS: !Split
                - ','
                - !Sub
                  - 'arn:aws:iam::${inner}:role/${CrossAccountRoleName}'
                  - inner: !Join
                    - !Sub ':role/${CrossAccountRoleName},arn:aws:iam::'
                    - !Ref TrustedAccountIds
            Action:
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
            Resource: !Sub '${CrossAccountS3Bucket}'

  # IAM Role for Cross-Account Access (to be assumed by trusted accounts)
  CrossAccountAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CrossAccountRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Split
                - ','
                - !Sub
                  - 'arn:aws:iam::${inner}:root'
                  - inner: !Join
                    - ':root,arn:aws:iam::'
                    - !Ref TrustedAccountIds
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${BucketName}-external-id'
              IpAddress:
                'aws:SourceIp': 
                  - '10.0.0.0/8'
                  - '172.16.0.0/12'
                  - '192.168.0.0/16'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess'
      Policies:
        - PolicyName: CrossAccountS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                Resource:
                  - !Sub '${CrossAccountS3Bucket}/*'
                  - !Sub '${CrossAccountS3Bucket}'
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                  - 'kms:DescribeKey'
                Resource: !GetAtt S3EncryptionKey.Arn
      Tags:
        - Key: Name
          Value: !Ref CrossAccountRoleName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Cross-Account S3 Access'

  # CloudWatch Log Group for S3 Events
  S3CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${BucketName}'
      RetentionInDays: !Ref CloudTrailRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-logs'
        - Key: Environment
          Value: !Ref Environment

  # CloudTrail for S3 API Logging
  S3CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub '${BucketName}-cloudtrail'
      S3BucketName: !Ref CloudTrailLogsBucket
      S3KeyPrefix: 'cloudtrail-logs/'
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: 'AWS::S3::Object'
              Values:
                - !Sub '${CrossAccountS3Bucket}/*'
            - Type: 'AWS::S3::Bucket'
              Values:
                - !Sub '${CrossAccountS3Bucket}'
      CloudWatchLogsLogGroupArn: !Sub '${CloudTrailLogGroup}:*'
      CloudWatchLogsRoleArn: !GetAtt CloudTrailLogsRole.Arn
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-cloudtrail'
        - Key: Environment
          Value: !Ref Environment

  # CloudTrail Logs Bucket
  CloudTrailLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-cloudtrail-logs'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldCloudTrailLogs
            Status: Enabled
            ExpirationInDays: 365
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-cloudtrail-logs'
        - Key: Environment
          Value: !Ref Environment

  # CloudTrail Logs Bucket Policy
  CloudTrailLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !Sub '${CloudTrailLogsBucket}'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub '${CloudTrailLogsBucket}/cloudtrail-logs/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

  # CloudWatch Log Group for CloudTrail
  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cloudtrail/${BucketName}'
      RetentionInDays: !Ref CloudTrailRetentionDays

  # IAM Role for CloudTrail to write to CloudWatch Logs
  CloudTrailLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudTrailLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub '${CloudTrailLogGroup}:*'

  # CloudWatch Alarms for Monitoring
  UnauthorizedAccessAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${BucketName}-unauthorized-access'
      AlarmDescription: 'Alert on unauthorized S3 access attempts'
      MetricName: 'UnauthorizedApiCallsCount'
      Namespace: 'AWS/CloudTrail'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  # SNS Topic for Alerts
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${BucketName}-security-alerts'
      DisplayName: 'S3 Cross-Account Security Alerts'
      KmsMasterKeyId: 'alias/aws/sns'

Outputs:
  BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref CrossAccountS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  BucketArn:
    Description: 'ARN of the created S3 bucket'
    Value: !GetAtt CrossAccountS3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BucketArn'

  KMSKeyId:
    Description: 'KMS Key ID for S3 encryption'
    Value: !Ref S3EncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  KMSKeyArn:
    Description: 'KMS Key ARN for S3 encryption'
    Value: !GetAtt S3EncryptionKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  CrossAccountRoleArn:
    Description: 'ARN of the cross-account access role'
    Value: !GetAtt CrossAccountAccessRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CrossAccountRoleArn'

  CloudTrailArn:
    Description: 'ARN of the CloudTrail for S3 logging'
    Value: !GetAtt S3CloudTrail.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailArn'

  SecurityAlertsTopicArn:
    Description: 'ARN of the SNS topic for security alerts'
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityAlertsTopicArn'

  ExternalId:
    Description: 'External ID for cross-account role assumption'
    Value: !Sub '${BucketName}-external-id'
    Export:
      Name: !Sub '${AWS::StackName}-ExternalId'

  AssumeRoleCommand:
    Description: 'AWS CLI command to assume the cross-account role'
    Value: !Sub |
      aws sts assume-role \
        --role-arn ${CrossAccountAccessRole.Arn} \
        --role-session-name CrossAccountS3Access \
        --external-id ${BucketName}-external-id
