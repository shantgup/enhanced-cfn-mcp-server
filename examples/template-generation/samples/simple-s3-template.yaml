AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple S3 Bucket Setup with Security Best Practices - Working Demo Template'

Parameters:
  BucketName:
    Type: String
    Description: 'Name for the S3 bucket (must be globally unique)'
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: 'Bucket name must be lowercase, start and end with alphanumeric characters'
    MinLength: 3
    MaxLength: 63

  Environment:
    Type: String
    Description: 'Environment designation'
    Default: 'development'
    AllowedValues:
      - development
      - staging
      - production

  EnableAccessLogging:
    Type: String
    Description: 'Enable S3 access logging'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  CreateAccessLogsBucket: !Equals [!Ref EnableAccessLogging, 'true']

Resources:
  # KMS Key for S3 Encryption (simplified - no cross-account access)
  S3EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'KMS Key for ${BucketName} S3 bucket encryption'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow S3 Service
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
              - 'kms:DescribeKey'
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-encryption-key'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'S3 Encryption'

  S3EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${BucketName}-s3-key'
      TargetKeyId: !Ref S3EncryptionKey

  # S3 Access Logging Bucket (if enabled)
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateAccessLogsBucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldAccessLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-access-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'S3 Access Logging'

  # Main S3 Bucket
  MainS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3EncryptionKey
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration: !If
        - CreateAccessLogsBucket
        - DestinationBucketName: !Ref AccessLogsBucket
          LogFilePrefix: 'access-logs/'
        - !Ref AWS::NoValue
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
              - TransitionInDays: 365
                StorageClass: DEEP_ARCHIVE
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Ref BucketName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Secure Data Storage'

  # S3 Bucket Policy for Security
  MainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MainS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${MainS3Bucket}/*'
              - !Sub '${MainS3Bucket}'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
          - Sid: DenyUnencryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub '${MainS3Bucket}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'

  # CloudWatch Log Group for S3 Events
  S3CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${BucketName}'
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-logs'
        - Key: Environment
          Value: !Ref Environment

  # SNS Topic for Alerts
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'S3 Security Alerts'
      KmsMasterKeyId: 'alias/aws/sns'
      Tags:
        - Key: Name
          Value: !Sub '${BucketName}-alerts'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarm for monitoring
  UnauthorizedAccessAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${BucketName}-unauthorized-access'
      AlarmDescription: 'Alert on potential unauthorized S3 access attempts'
      MetricName: '4xxError'
      Namespace: 'AWS/S3'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertsTopic
      Dimensions:
        - Name: BucketName
          Value: !Ref MainS3Bucket

Outputs:
  BucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref MainS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  BucketArn:
    Description: 'ARN of the created S3 bucket'
    Value: !GetAtt MainS3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BucketArn'

  BucketDomainName:
    Description: 'Domain name of the S3 bucket'
    Value: !GetAtt MainS3Bucket.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-BucketDomainName'

  KMSKeyId:
    Description: 'KMS Key ID for S3 encryption'
    Value: !Ref S3EncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  KMSKeyArn:
    Description: 'KMS Key ARN for S3 encryption'
    Value: !GetAtt S3EncryptionKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  SecurityAlertsTopicArn:
    Description: 'ARN of the SNS topic for security alerts'
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityAlertsTopicArn'

  AccessLogsBucketName:
    Condition: CreateAccessLogsBucket
    Description: 'Name of the access logs bucket'
    Value: !Ref AccessLogsBucket
    Export:
      Name: !Sub '${AWS::StackName}-AccessLogsBucketName'

  S3ConsoleUrl:
    Description: 'AWS Console URL for the S3 bucket'
    Value: !Sub 'https://s3.console.aws.amazon.com/s3/buckets/${MainS3Bucket}?region=${AWS::Region}'
